// Generated by CoffeeScript 1.3.3
(function() {
  var Canvas, ColorProcessor, Display, ScaleProcessor, colors, scales,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Canvas = require('./canvas');

  scales = require('./scales');

  ScaleProcessor = require('./scale_processor');

  colors = require('./colors');

  ColorProcessor = require('./color_processor');

  Display = (function(_super) {

    __extends(Display, _super);

    function Display(container, desiredWidth, image) {
      var scaledHeight, scaledWidth;
      this.imageData = image.data;
      this.imageWidth = image.width;
      this.imageHeight = image.height;
      scaledWidth = ~~desiredWidth;
      this.scaleRatio = this.imageWidth / scaledWidth;
      scaledHeight = ~~(this.imageHeight / this.scaleRatio);
      this.buildScaleBuffers();
      this.buildColorBuffers();
      this.scale = scales.linear;
      this.color = colors.grayscale;
      this.scaler = new ScaleProcessor(this.scale);
      this.colorer = new ColorProcessor(this.color);
      Display.__super__.constructor.call(this, container, scaledWidth, scaledHeight);
    }

    Display.prototype.buildScaleBuffers = function() {
      this.scaleBuffer = new ArrayBuffer(this.imageWidth * this.imageHeight);
      this.scaleView8 = new Uint8ClampedArray(this.scaleBuffer);
      return void 0;
    };

    Display.prototype.buildColorBuffers = function() {
      this.colorBuffer = new ArrayBuffer(this.imageWidth * this.imageHeight * 4);
      this.colorView8 = new Uint8ClampedArray(this.colorBuffer);
      this.colorView32 = new Uint32Array(this.colorBuffer);
      return void 0;
    };

    Display.prototype.processImage = function() {
      var coeff, invertCoeff, x, y, _i, _j, _ref, _ref1;
      this.scaler.process(this.imageData, this.scaleView8);
      this.colorer.process(this.scaleView8, this.colorView32);
      invertCoeff = (this.imageHeight - 1) * this.imageWidth;
      for (x = _i = 0, _ref = this.canvasWidth - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        coeff = ~~(x * this.scaleRatio) + invertCoeff;
        for (y = _j = 0, _ref1 = this.canvasHeight - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.canvasView32[(this.canvasWidth * y) + x] = this.colorView32[coeff - (~~(y * this.scaleRatio)) * this.imageWidth];
        }
      }
      return void 0;
    };

    return Display;

  })(Canvas);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Display;
  }

}).call(this);
