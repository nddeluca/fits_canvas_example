{
  "name": "fits_canvas",
  "version": "0.0.1",
  "author": {
    "name": "Nicholas DeLuca",
    "email": "nickdeluca08@gmail.com"
  },
  "description": "Project to handle processing of fits data for viewing on html5 canvas",
  "repository": {
    "type": "git",
    "url": "https://github.com/nddeluca/fits_canvas"
  },
  "dependencies": {},
  "readme": "FitsCanvas\n===================\n\nLibrary to display fits files and other images in the browser using an html5 canvas.\n\nInstall\n---\nAssuming your using a spinejs or hem application:\n\nAdd to package.json\n```coffeescript\n\"dependencies\": {\n  \"fits_canvas\": \"git://github.com/nddeluca/fits_canvas.git\"\n}\n```\nAdd to slug.json\n```coffeescript\n\"dependencies\": [\n  \"fits_canvas\"\n]\n```\nRun\n```bash\nnpm install\n```\n\nSimple Usage\n---\nTo display a fits file create a new Display Object.  The Display class takes a container id, width, and an image.\nThe conainter id is the css id of the containing div element where the canvas will be created.\nThe width is the width of the canvas the fits image is displayed on (also the width of the image).\nThe image is any object with data, width, and height attributes.\n```coffeescript\ndisplay = new FitsCanvas.Display(container_id, width, image)\n```\nOnce a FitsDisplay is created, call processImage() to build the fits image.\nThen call draw() to draw the image to the canvas.\n```coffeescript\ndisplay.processImage()\ndisplay.draw()\n```\nThe default scaling of the image is linear, and the default color is grayscale.\nThe height is set by using the intial width to keep the same aspect ratio.\n\nNote: The canvas does not have to be the same size as the fit file image.\nThe fits image will be scaled down or up to fit the canvas when drawn.\n\nUse\nExample of this usage:\n```coffeescript\nFitsCanvas = require('fits_canvas')\nFITS = require('fits')\n\nxhr = new XMLHttpRequest()\nxhr.open('GET', 'images/my_fits_file.fits')\nxhr.responseType = 'arraybuffer'  \t\nxhr.send()\n\nxhr.onload = (e) ->\n  #Use atrojs/fitsjs to get fits image from binary file\n  fitsFile = new FITS.file(xhr.response)\n  image = fitsFile.getDataUnit()\n  image.getFrame()\n  \n  display = new FitsCanvas.Display('my-canvas-container',500,image)\n  display.processImage()\n  display.draw()\n```\n```html\n<div id=\"my-canvas-container\"></div>\n```\n\nAdvanced Usage\n---\nThe library also allows different scaling and color methods to be used.\nHowever, currently only linear scaling and grayscale color are available.\n\nThough, as more methods are written they can be set by setting the scale and color method of the FitsDisplay \nbefore calling processImage(). For example, the following code would use a log scale \nand heat color to show the fits image.\n```coffeescript\ndisplay = new FitsCanvas.Display('my-container',500,image)\ndisplay.scale = FitCanvas.scales.log #Not availiable yet\ndisplay.color = FitCanvas.colors.heat #Not availiable yet\ndisplay.processImage()\ndisplay.draw()\n```\nIn addition, custom functions can be written and used to scale or color the image.\n```coffeescript\nmyScaleFunction = (imageData, scaleData) ->\n  #Use own scaling method here\n  \ndisplay.scale = myScaleFunction\n```\nThe imageData parameter is the data from the fits image.  The scaleData parameter is the array being written to, \nand is a Uint8ClampedArray in order to insure values bewteen 0 and 255.  The fitsMin parameter is the \nmininum value in the imageData array, and the fitsMax parameter is the maxinum value in the fitsData array.\n\nSimilary with color:\n```coffeescript\nmyColorFunction = (scaleData, colorData) ->\n  #Use own color method here\n\ndisplay.color = myColorFunction\n```\nThe scaleData is the data returned by the scaling method and is a Uint8ClampedArray with values from 0 to 255.\nThe colorData is a Uint32Array where each RGBA pixel (8 bits each value) is represented in each array index.\n\nTo get an idea of the usage, here is the linear and grayscale functions that are used by default.\n```coffeescript\nscales = \n  linear: (imageData, scaleData) ->\n    min = utils.min(imageData)\n    max = utils.max(imageData)\n    range = max - min\n    for i in [0..(scaleData.length - 1)]\n      scaleData[i] = ~~(255*((imageData[i] - min)/range))\n    return\n\ncolors =\n  grayscale: (scaleData,colorData) ->\n    for i in [0..(scaleData.length-1)]\n      value = scaleData[i]\n      colorData[i] = (255 << 24) | (value << 16) | (value << 8) | value\n    return\n```\nNote: It's important that these functions end with return.  Ended with a loop will negatively affect performance.\n\nTo Do\n---\n* Write tests and benchmark\n* Add processor endainness check (the grayscale algorithm currently only works on little-endian machines)\n\nReferences\n---\nhttps://github.com/astrojs/fitsjs  \nhttps://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/  \nhttp://tech-algorithm.com/articles/nearest-neighbor-image-scaling/  \nhttp://coffeescriptcookbook.com/  \n\n",
  "_id": "fits_canvas@0.0.1",
  "dist": {
    "shasum": "e25c8a5bbce44cc3b445d21a13975177fea77253"
  },
  "_from": "fits_canvas@git://github.com/nddeluca/fits_canvas.git"
}
