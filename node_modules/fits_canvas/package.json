{
  "name": "fits_canvas",
  "version": "0.0.1",
  "author": {
    "name": "Nicholas DeLuca",
    "email": "nickdeluca08@gmail.com"
  },
  "description": "Project to handle processing of fits data for viewing on html5 canvas",
  "repository": {
    "type": "git",
    "url": "https://github.com/nddeluca/fits_data_processor"
  },
  "dependencies": {
    "fitsjs": "git://github.com/astrojs/fitsjs.git"
  },
  "readme": "FitsCanvas\n===================\n\nLibrary to display fits files in the browser using astrojs/fitsjs and html5 canvas.\n\nInstall\n---\nAdd to package.json\n```coffeescript\n\"dependencies\": {\n  \"fits_canvas\": \"git://github.com/nddeluca/fits_canvas.git\"\n}\n```\nAdd to slug.json\n```coffeescript\n\"dependencies\": [\n  \"fits_canvas\"\n]\n```\nRun\n```bash\nnpm install\n```\n\nSimple Usage\n---\nTo display a fits file create a new FitsDisplay Object.  FitsDisplay takes a container id, width, and binary fits file.\nThe conainter id is the css id of the containing div element where the canvas will be created.\nThe width is the width of the canvas the fits image is displayed on (also the width of the image).\nAnd the fits_file is an arraybuffer of a binary fits file.\n```coffeescript\ndisplay = new FitsCanvas.FitsDisplay(container_id, width, fits_file)\n```\nOnce a FitsDisplay is created, call processImage() to build the fits image.\nThen call draw() to draw the image to the canvas.\n```coffeescript\ndisplay.processImage()\ndisplay.draw()\n```\nThe default scaling of the image is linear, and the default color is grayscale.\nThe height is set by using the intial width to keep the same aspect ratio.\n\nNote: The canvas does not have to be the same size as the fit file image.\nThe fits image will be scaled down or up to fit the canvas when drawn.\n\nExample of this usage:\n```coffeescript\nFitsCanvas = require('fits_canvas')\n\nxhr = new XMLHttpRequest()\nxhr.open('GET', 'images/my_fits_file.fits')\nxhr.responseType = 'arraybuffer'  \t\nxhr.send()\n\nxhr.onload = (e) ->\n  display = new FitsCanvas.FitsDisplay('my-canvas-container',500,xhr.response)\n  display.processImage()\n  display.draw()\n```\n```html\n<div id=\"my-canvas-container\"></div>\n```\n\nAdvanced Usage\n---\nThe library also allows different scaling and color methods to be used.\nHowever, currently only linear scaling and grayscale color are available.\n\nThough, as more methods are written they can be set by setting the scale and color method of the FitsDisplay \nbefore calling processImage(). For example, the following code would use a log scale \nand heat color to show the fits image.\n```coffeescript\ndisplay = new FitsCanvas.FitsDisplay('my-container',500,fits_array_buffer)\ndisplay.scale = FitCanvas.scales.log #Not availiable yet\ndisplay.color = FitCanvas.colors.heat #Not availiable yet\ndisplay.processImage()\ndisplay.draw()\n```\nIn addition, custom functions can be written and used to scale or color the image.\n```coffeescript\nmyScaleFunction = (fitsData, scaleData, fitsMin, fitsMax) ->\n  #Use own scaling method here\n  \ndisplay.scale = myScaleFunction\n```\nThe fitsData parameter is the data from the fits file.  The scaleData parameter is the array being written to, \nand is a Uint8ClampedArray in order to insure values bewteen 0 and 255.  The fitsMin parameter is the \nmininum value in the fitsData array, and the fitsMax parameter is the maxinum value in the fitsData array.\n\nSimilary with color:\n```coffeescript\nmyColorFunction = (scaleData, colorData) ->\n  #Use own color method here\n\ndisplay.color = myColorFunction\n```\nThe scaleData is the data returned by the scaling method and is a Uint8ClampedArray with values from 0 to 255.\nThe colorData is a Uint32Array where each RGBA pixel (8 bits each value) is represented in each array index.\n\nTo get an idea of the usage, here is the linear and grayscale functions that are used by default.\n```coffeescript\nscales = \n  linear: (fitsData, scaleData, min, max) ->\n    range = max - min\n    for i in [0..(scaleData.length - 1)]\n      scaleData[i] = ~~(255*((fitsData[i] - min)/range))\n    return\n\ncolors =\n  grayscale: (scaleData,colorData) ->\n    for i in [0..(scaleData.length-1)]\n      value = scaleData[i]\n      colorData[i] = (255 << 24) | (value << 16) | (value << 8) | value\n    return\n```\nNote: It's important that these functions end with return.  Ended with a loop will negatively affect performance.\n\nTo Do\n---\n* Add class to display galaxy models\n* Add class to display residuals\n* Write tests and benchmark\n* Add processor endainness check (the grayscale algorithm currently only works on little-endian machines)\n\nReferences\n---\nhttps://github.com/astrojs/fitsjs  \nhttps://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/  \nhttp://tech-algorithm.com/articles/nearest-neighbor-image-scaling/  \nhttp://coffeescriptcookbook.com/  \n\n",
  "_id": "fits_canvas@0.0.1",
  "dist": {
    "shasum": "3096c8f42faf8137e69b775d30c14033b0adc2cb"
  },
  "_from": "fits_canvas@git://github.com/nddeluca/fits_canvas.git"
}
